<?php
class ReportsController extends AppController {

	public $components = array('Search.Prg');

	public $presetVars = array();

	protected function _setupAuth() {
		parent::_setupAuth();

		$this->Auth->allow('*');
	}

	private function __allowedReport($reportSlug) {
		$roles = Set::extract('/Role/id', Auth::get());
		$rolePermissions = Configure::read('Report.Roles');

		foreach ($roles as $role) {
			if (in_array($role, $rolePermissions[$reportSlug])) {
				return true;
			}
		}
		return false;
	}

/**
 * [index description]
 * @param  [type] $reportSlug [description]
 * @return [type]             [description]
 * @throws Exception If [this condition is met]
 */
	public function index($reportSlug = null) {
		ini_set('memory_limit', -1);

		$permission = array(
			'controller' => 'process.report',
			'crud' => 'read'
		);

		if ($this->Auth->userPermission($permission)) {
			if (!empty($reportSlug)) {
				try {
					if (!$this->__allowedReport($reportSlug)) {
						$reportData = array();
						$this->Session->setFlash('You do not have permission to access this page/report.');
						return;
					}

					set_time_limit(0);
					Cache::clear();
					$report = $this->Report->findReport($reportSlug);
					$reportModel = $report['model'];
					$reportCallableMethod = $report['method'];
					$reportMethod = $report['method'];
					$reportPaginated = $report['paginated'];
					$this->loadModel($reportModel);
					if (!method_exists($this->{$reportModel}, $reportCallableMethod)) {
						$reportCallableMethod = Inflector::variable($reportCallableMethod);
					}

					if (!method_exists($this->{$reportModel}, $reportCallableMethod)) {
						throw new Exception(__('There was a problem generating the requested report.', true));
					}

					$conditions = array();
					if (!empty($this->{$reportModel}->presetVars[$reportMethod])) {
						$this->presetVars = $this->{$reportModel}->presetVars[$reportMethod];
						$this->modelClass = $reportModel;
						$this->Prg->commonProcess();

						$conditions = $this->{$reportModel}->parseCriteria($this->data[$reportModel]);
					}

					if ($reportPaginated) {
						$this->paginate = array(
							$reportModel => $this->{$reportModel}->{$reportCallableMethod}($conditions)
						);

						if ($this->RequestHandler->ext == 'html') {
							$reportData = $this->paginate($reportModel, $conditions);
						} else {
							$this->paginate[$reportModel]['conditions'] = array_merge($this->paginate[$reportModel]['conditions'], $conditions);
							$reportData = $this->{$reportModel}->find('all', $this->paginate[$reportModel]);
						}
					} else {
						$reportData = $this->{$reportModel}->{$reportCallableMethod}($conditions);
					}

					if (method_exists($this->{$reportModel}, 'reportData')) {
						$this->set($this->{$reportModel}->reportData($report));
					}

					$this->set('options', array(
						'footer' => array(
							'left' => 'Generated by HEQSF Online - ' . date('Y/m/d'),
							'right' => 'Page [page] of [topage]'
						)
					));

					$cancelLookups = array(
						// 'heqf-data-dump' => true
					);

					//if(!isset($cancelLookups[$reportSlug])){
					$recursive = 2;
					$this->set($this->{$reportModel}->fetchLookups());
					//}

					$this->{$reportModel}->recursive = $recursive;
					$this->set(compact('report', 'reportData'));

					$this->render('report');
				}
				catch(Exception $e) {
					$this->Session->setFlash($e->getMessage());
				}
			} else {

			}
		} else {
			$this->Session->setFlash('You do not have permission to access this page/report.');
		}
	}

}